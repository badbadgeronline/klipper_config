	[gcode_macro start_print]
	gcode:
		M109 S{ params.TOOL_TEMP }		# Heat the tool to temperature and wait
		G92 E0 							# Reset Extruder
		G1 Z2.0 F3000 					# Move Z Axis to travel height
		G1 X0.1 Y20 Z0.2 F5000.0 		# Move to start position
		G1 X0.1 Y200.0 Z0.2 F1500.0 E15 # Draw the first line
		G1 X0.4 Y200.0 Z0.2 F5000.0 	# Move to side a little
		G1 X0.4 Y20 Z0.3 F1500.0 E30 	# Draw the second line
		G92 E0 							# Reset Extruder
		G1 Z2.0 F3000 					# Move Z Axis up to travel height

#   Can be called directly      start_print tool_temp=200

#   Or from slicer variable     start_print tool_temp=[first_layer_temperature]

#   Parameters passed to a gcode macro are contained within the params collection. 
#   Due to how parameters are handled in the gcode parser, 
#   they must be capitalized when referencing them in a macro.

#   Klipper exposed the printer.object

{% if printer.homed_axes != 'XYZ' %}
		G28			#Home All Axes
	{% endif %}

#   Part 4: Default Parameters

#   One way to check to see if a
#   parameter exits is simply to evaluate it.

	{% if PA %}
	{% if params.PA %}

#   Gcode parameters are accessed in macros through either directly referencing
#   the parameter name or by using the params collection. There are some
#   nuances to using the params collection in that, it will only have values that
#   are passed in through the gcode command. Whereas directly referencing
#   the parameter name can allow us to get a default value for ‘default_parameter_PA’

{ params.PA|default(.06) }

SET_PRESSURE_ADVANCE ADVANCE={ params.PA|default(.06) }

[gcode_macro start_print]
default_parameter_PA: 0.06
	gcode:

#   Part 5: Assignments, Casting, and Scope

#   To create a new variable, we use the Jinja2 set expression

{% set toolTemp = params.TOOL_TEMP %}

#   parameters are always a string,
#   so before we can do any math or comparisions on it, we need to make it
#   into something a bit more numeric by casting types.
#   Filters are applied by supplying a | (pipe) followed by the filter type

params.TOOL_TEMP|int

#   in order to round a float to the nearest whole number in order to cast
#   it as an int we need to apply the round filter the round filter takes
#   a parameter that specifies how many digits after the decimal point to
#   round the number to.

a|round(0)|int

{% set target  = params.BED_TEMP|int %}                 # This needs to be cast as an int because the parameter is always a string
	{% set current = printer.heater_bed.temperature %}  # This is already a float or int
	
	{% if current < target - 20 %}
		G4 P{ 5 * 60 * 1000 }       #Milliseconds to dwell
	{% else %}
		G4 P{ 1 * 60 * 1000 }
	{% endif %}

{% set myList = [ 2, 4, 6, 8, 10] %}        #   Lists are mutable

{% set myTuple = ( 2, 4, 6, 8, 10) %}       #   Tuples are immutable
